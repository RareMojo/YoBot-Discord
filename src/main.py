import asyncio
import os

import yaml

from utils.yobot_builder import Builder
from utils.yobot_configs import Configs

#                       __                 __
#                      /\ \               /\ \__
#    __  __      ___   \ \ \____    ___   \ \ ,_\
#   /\ \/\ \    / __`\  \ \ '__`\  / __`\  \ \ \/
#   \ \ \_\ \  /\ \L\ \  \ \ \L\ \/\ \L\ \  \ \ \_
#    \/`____ \ \ \____/   \ \_,__/\ \____/   \ \__\
#     `/___/> \ \/___/     \/___/  \/___/     \/__/
#        /\___/
#        \/__/                 by  R A R E M O J O
#
#
# YoBot-Discord - A basic Discord bot written in Python.
# Copyright (C) 2023  Nicolas 'RareMojo' Rejcek
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program as 'LICENSE.md'.  If not, see <https://www.gnu.org/licenses/>.


def launch_bot():
    """
    Ensures that the bot's files are set up, then builds and starts the bot.

    Launch this file to start the bot. Run: `python launch.py` in the command line.

    If you are a user, do not edit this file. You can edit values in the configs/config.yaml file.

    If you are a cog developer, you should not need to edit this file.

    If you are developing the bot itself, you may need to edit this file.

    This is meant to be the main entry point for the bot.
    """
    root_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  # The root of the project file is considered <../YoBot-Discord>.
    config_dir = f'{root_dir}/configs'
    config_file = f'{root_dir}/configs/config.yaml'
    log_dir = f'{root_dir}/logs'
    log_file = f'{root_dir}/logs/latest.log'
    avatar_file = f'{root_dir}/resources/images/avatar.png'
    cogs_dir = f'{root_dir}/src/cogs'
    resources_dir = f'{root_dir}/resources'
    images_dir = f'{root_dir}/resources/images'
    sounds_dir = f'{root_dir}/resources/sounds'
    texts_dir = f'{root_dir}/resources/texts'
    ascii_logo = f'{root_dir}/resources/texts/logo.txt'
    try:
        try:
            print('Checking for directories...')
            if not os.path.isdir(config_dir):
                os.mkdir(config_dir)
                print('Config directory not found. Creating config directory...')

            if not os.path.isdir(log_dir):
                os.mkdir(log_dir)
                print('Log directory not found. Creating log directory...')
                with open(log_file, 'w') as f:
                    f.write('')
                print('Log file not found. Creating log file...')

            if not os.path.isdir(cogs_dir):
                os.mkdir(cogs_dir)
                print('Cogs directory not found. Creating cogs directory...')
        except Exception as e:
            print(f'Error creating directories: {e}')

        if not os.path.isfile(config_file):
            print('Config file not found. Setting up config...')
            print('Please enter the following information to set up the config file.')

            file_paths = {
                "root_dir": root_dir,
                "config_dir": config_dir,
                "config_file": config_file,
                "log_dir": log_dir,
                "log_file": log_file,
                "avatar_file": avatar_file,
                "cogs_dir": cogs_dir,
                "resources_dir": resources_dir,
                "images_dir": images_dir,
                "sounds_dir": sounds_dir,
                "texts_dir": texts_dir,
                "ascii_logo": ascii_logo
            }

            new_config = {
                "owner_name": input('Owner Name: '),
                "owner_id": input('Owner ID: '),
                "prefix": input('Command Prefix: '),
                "discord_token": input('Discord Token: '),
                "bot_name": input('Bot Name: '),
                "presence": input('Presence: '),
                "log_level": 'INFO',
                "dev_mode": False,
                "update_bot": True,
                "file_paths": file_paths,
                "cog_repo": {
                    "repo_owner": "RareMojo",
                    "repo_name": "YoBot-Discord-Cogs",
                    "repo_info": "cogdescriptions.csv",
                },
                "blacklist": {
                    "cog_removal": ["yobotcorecog.py", "yobotcommandcog.py"],
                }
            }

            with open(config_file, 'w') as f:
                yaml.dump(new_config, f, default_flow_style=False)
            print('Config file created.')
        else:
            print('Config file found.')
    except Exception as e:
        print(f'Error setting up YoBot files: {e}')

    config = Configs(config_file)
    config.load()
    builder = Builder(config=config)

    yobot = builder.yobot_build()  # Build the bot.
    if yobot:
        asyncio.run(yobot.start_bot())
    else:
        print('YoBot failed to build or start.')
        input('Press ENTER to EXIT.')


if __name__ == "__main__":
    launch_bot()